#version 450 core
// The format of the coordinates being outputted by the primitive generator
layout(triangles, equal_spacing, ccw) in;

// Linear interpolation functions for vec3s and vec2s
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2) ;
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2) ;
float hash(float n);
float snoise(vec3 x);
float noise(vec3 position, int octaves);


uniform sampler2D[16] u_diffuseMap;

layout(std140) uniform Camera
{
	mat4 u_view;
	mat4 u_projection;
	vec3 u_viewPos;
};

layout(std140) uniform Tessellation
{
	int u_tessellationEquation;
	bool u_generateY;
	int u_octaves;
	float u_scale;
	float u_frequency;
	float u_amplitude;
	float u_amplitudeDivisor;
	float u_frequencyMultiplier;
};

// Unedited vertex data from the TCS
in TCS_OUT {
	vec2 TexCoords;
	flat int TexUnit;
	vec4 Tint;
	vec3 FragPos;
	int TessLevel;
} tes_in[];

// Fragment requires vertex data
out TES_OUT {
	vec3 Normals;
	vec2 TexCoords;
	flat int TexUnit;
	vec4 Tint;
	vec3 ViewPos;
	vec3 FragPos;
} tes_out;

void main()
{
   // interpolate the normal and xyz position using the linear interpolation function
   // use 3D because they are in three dimensions; 2D also included for uv texture coordinates
   tes_out.TexCoords = interpolate2D(tes_in[0].TexCoords, tes_in[1].TexCoords, tes_in[2].TexCoords);
   tes_out.TexUnit = tes_in[0].TexUnit;
   tes_out.Tint = tes_in[0].Tint;
   vec3 pos = interpolate3D(tes_in[0].FragPos, tes_in[1].FragPos, tes_in[2].FragPos);
   vec3 Normals = vec3(0.0, 1.0, 0.0);
   
   if(u_generateY == true)
   {
		// Use the central difference method to calculate the normals
		vec3 right = vec3(pos.x+1, pos.y, pos.z);
		vec3 left = vec3(pos.x-1, pos.y, pos.z);
		vec3 up = vec3(pos.x, pos.y, pos.z+1);
		vec3 down = vec3(pos.x, pos.y, pos.z-1);
	    
		float r = noise(right, u_octaves);
		float l = noise(left, u_octaves);
		float u = noise(up, u_octaves);
		float d = noise(down, u_octaves);
		Normals = normalize(vec3((l-r), 2.0, (u-d)));
		
		pos.y = noise(pos, u_octaves);
   }
   
   tes_out.FragPos = pos;
   tes_out.ViewPos = u_viewPos;
   tes_out.Normals = Normals;

   // transform vertex position to clip space  - NOTE: WE NEED TO DO IT HERE NOW and not in vertex shader
   gl_Position = u_projection * u_view * vec4(pos, 1.0);
} 

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
	// gl_TessCoord is the baycentric coordinate generated
   	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
	// gl_TessCoord is the baycentric coordinate generated
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

float hash(float n) {
    return fract(sin(n) * 753.5453123);
}

float snoise(vec3 x)
{
	vec3 p = floor(x);
	vec3 f = fract(x);
	f = f * f * (3.0f - (2.0f * f));

	float n = p.x + p.y * 157.0f + 113.0f * p.z;
	return mix(mix(mix(hash(n + 0.0f), hash(n + 1.0f), f.x),
		mix(hash(n + 157.0f), hash(n + 158.0f), f.x), f.y),
		mix(mix(hash(n + 113.0f), hash(n + 114.0f), f.x),
			mix(hash(n + 270.0f), hash(n + 271.0f), f.x), f.y), f.z);
}

float noise(vec3 position, int octaves)
{
	float total = 0.0;
	float frequency = u_frequency;
	float maxAmplitude = 0.0;
	float amplitude = u_amplitude;
	float scale = u_scale;
	
	for(int i = 0; i < octaves; i++)
	{
		total += snoise(position * frequency) * amplitude;
		frequency *= u_frequencyMultiplier;
		amplitude /= u_amplitudeDivisor;
		maxAmplitude += amplitude;
	}
	return (total / maxAmplitude) * scale;
}